<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter [
<!ENTITY % BOOK_ENTITIES SYSTEM "QluMan_Guide.ent">
%BOOK_ENTITIES;
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % DOCBOOK_ENTS PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "/usr/share/xml/docbook/schema/dtd/4.5/dbcentx.mod">
%DOCBOOK_ENTS;
]>
<chapter xmlns="http://docbook.org/ns/docbook"
	 xmlns:xlink="http://www.w3.org/1999/xlink"
	 xmlns:xi="http://www.w3.org/2001/XInclude"
	 xml:id="chap-Config-Classes">
  <title>Common Config Classes</title>
  <section xml:id="sec-Config-Classes-Overview">
    <title>Overview</title>
    <para>
      <classname>Config Classes</classname> manage configurations that are too complex to fit
      into the key + value scheme used by properties. Therefore, there is no common interface
      to configure all classes. Instead, each class has its own configuration dialog,
      presenting the specific options it provides. Furthermore, some classes depend on
      sub-classes (e.g. <classname>Boot Configs</classname> depend on <classname>Qlustar
      Images</classname>). Only the top-level <classname>Config Classes</classname> are
      directly assignable to a <classname>Config Set</classname> or a host. Sub-classes are
      assigned indirectly via their parent class. Most of the functional subsystems of
      <productname>Qlustar</productname> have a dedicated <classname>Config
      Class</classname>. Currently, there are five of them: <classname>Network</classname>,
      <classname>Boot</classname>, <classname>DHCP</classname>, <classname>Disk</classname>,
      and <classname>Slurm Configs</classname> (Slurm is optional) complemented by a single
      sub-class, <classname>Qlustar Images</classname>. Please note that the
      <classname>Network Configs</classname> has already been described in a <link
      linkend="sec-Network-Configs">previous chapter</link>
    </para>
  </section>
  <section xml:id="sec-Writing-Config-Files">
    <title>Writing Config Files</title>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/write_files/main.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          The Write Files dialog
        </phrase></textobject>
        <caption><para>
          The Write Files dialog
        </para></caption>
      </mediaobject>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/write_files/with_changes.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          The Write Files dialog with pending changes
        </phrase></textobject>
        <caption><para>
          The Write Files dialog with pending changes
        </para></caption>
      </mediaobject>
      Many of the configurations managed in the <application>QluMan</application> GUI via
      <classname>Config Classes</classname> and sub-classes, are translated into automatically
      generated configuration files on the head-node(s). While
      <application>QluMan</application> configuration options are usually saved in the
      <application>QluMan</application> database immediately after they have been entered in
      the GUI, the write process of the real configuration files on disk is a separate step,
      that needs to be specifically initiated and confirmed.
    </para>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/write_files/write_files_button.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          The Write Files button.
        </phrase></textobject>
        <caption><para>
          The Write Files button.
        </para></caption>
      </mediaobject>
      Each configuration dialog of a config class has a <guibutton>Preview</guibutton> and a
      <guibutton>Write</guibutton> button for its own config files. Additionally, there is a
      dedicated dialog for writing and previewing <emphasis role="bold">all</emphasis>
      configuration files. You can access the latter from <guimenuitem>Manage
      Cluster</guimenuitem>-><guimenuitem>Write Files</guimenuitem> or via the <guibutton>Write
      Files</guibutton> button at the bottom right of the main window. The button is an
      indicator for the presence of pending changes: It is grayed out if there aren't any, and
      fully visible otherwise.
    </para>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/preview_diff/view.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Display of a config's content
        </phrase></textobject>
        <caption><para>
          Display of a config's content
        </para></caption>
      </mediaobject>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/preview_diff/diff_one.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Display of a single config's content including a diff
        </phrase></textobject>
        <caption><para>
          Display of a single config's content including a diff
        </para></caption>
      </mediaobject>
       <mediaobject>
        <imageobject><imagedata
        fileref="images/preview_diff/diff_many.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Display of multiple configs including their diffs
        </phrase></textobject>
        <caption><para>
          Display of multiple configs including their diffs
        </para></caption>
      </mediaobject>
      If a config class has no pending changes, the <guibutton>Preview</guibutton> button
      becomes a <guibutton>View</guibutton> button and the <guibutton>Write</guibutton> button
      becomes ghosted. The Preview window shows both, the new version of the config file that
      will be written, as well as a <parameter>context diff</parameter> of the changes compared
      to the current file on disk (if there are any differences). If a <classname>Config
      Class</classname> changes only one file, that file will be shown directly. If multiple
      files are involved, there will be one tab for each file.
    </para>
    <note>
      <para>
	Checking the optional <guibutton>Force</guibutton> button, will initiate a rewrite of
	all config files, even if they haven't changed.
      </para>
    </note>
    <note>
      <para>
	The actual write command is performed via the <link linkend="chap-RX-Engine">Qlustar
	RXEngine</link>. This allows for <emphasis role="bold">consistent management</emphasis>
	of multiple head-nodes e.g. in a high-availability configuration.
      </para>
    </note>
    <section xml:id="sec-Host-Specific-Configs">
      <title>Host-specific Configs</title>
      <para>
	<mediaobject>
          <imageobject><imagedata
          fileref="images/enclosure_view/preview_config.png"
          width="85%" format="PNG"/></imageobject>
          <textobject><phrase>
            Initiating a preview of host specific config files
          </phrase></textobject>
          <caption><para>
            Initiating a preview of host specific config files
          </para></caption>
	</mediaobject>
	<mediaobject>
          <imageobject><imagedata
          fileref="images/enclosure_view/preview_config2.png"
          width="85%" format="PNG"/></imageobject>
          <textobject><phrase>
            Preview of host specific config files
          </phrase></textobject>
          <caption><para>
            Preview of host specific config files
          </para></caption>
	</mediaobject>
	Various configurations managed in the <application>QluMan</application> GUI via
	<classname>Config Classes</classname> and sub-classes translate into automatically
	generated configuration files for the individual hosts. These will be sent to the host
	and written by its <application>execd</application> in the pre-systemd phase of the
	boot process. There is generally no update mechanism for running systems and changes
	only take effect on the next reboot. A preview of the generated configs can be
	initiated by selecting <guimenuitem>Preview config</guimenuitem> from the context menu
	of a host.
      </para>
    </section>
  </section>
  <section xml:id="sec-Boot-Configs">
    <title>Boot Configs</title>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/boot_config/collapsed.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Boot Config dialog
        </phrase></textobject>
        <caption><para>
          Boot Config dialog
        </para></caption>
      </mediaobject>
      The <classname>Boot Config</classname> dialog allows to define settings for the PXE/tftp
      boot server. A boot configuration determines which <link
      linkend="sec-Qlustar-OS-Images">Qlustar OS image</link> is delivered to a node, and
      optionally permits the specification of <firstterm>PXELinux</firstterm> commands and/or
      Linux kernel parameters. When opened, the <classname>Boot Config</classname> window shows
      a collapsed tree-list of all boot configs currently defined, sorted by their names.
    </para>
    <note>
      <para>
	Note that the <classname>default config</classname> is special: It applies to any node
	without a specifically assigned (either through a template or directly) <classname>Boot
	Config</classname>. This means, that in the simplest configuration, where all nodes
	should boot identically, having just the <classname>default config</classname> will be
	sufficient.
      </para>
    </note>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/boot_config/context_menu.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Changing a Boot Config
        </phrase></textobject>
        <caption><para>
          Changing a Boot Config
        </para></caption>
      </mediaobject>
      By expanding a <classname>Boot Config</classname> item, the configured
      <productname>Qlustar</productname> image, PXELinux command, and kernel parameters become
      visible. You can change any of the values, by simply selecting a different option from
      the drop-down menus. In case of kernel parameters, you can also directly edit the entry
      and save the result by pressing <keycap>return</keycap>. Furthermore, it is possible to
      add multiple kernel parameters or remove them through the context menu. Each selected
      kernel parameter will be added to the kernel command line.
    </para>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/boot_config/new.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Creating new Boot Configs
        </phrase></textobject>
        <caption><para>
          Creating new Boot Configs
        </para></caption>
      </mediaobject>
      The context menu also lets you create new <classname>Boot Configs</classname> and edit or
      delete an existing one. Alternatively, a new <classname>Boot Config</classname> can be
      created by clicking the <guibutton>New</guibutton> button at the bottom of the
      dialog. Both, the context menu and the button bring up the <classname>New Boot
      Config</classname> dialog. Simply enter the name and description for the new config,
      select a Qlustar image and (optionally) a PXELinux command. Finally press
      <guibutton>OK</guibutton> to create it. The new config will then appear in the
      <classname>Boot Config</classname> window and will be ready for use.
    </para>
    <para>
      Pressing the <guibutton>Boot Parameter Editor</guibutton> button at the bottom of the
      dialog, will bring up a small edit dialog, where kernel parameters can be created,
      edited, or deleted.
    </para>
  </section>
  <section xml:id="sec-Disk-Configs">
    <title>Disk Configs</title>
    <para>
      <productname>Qlustar</productname> has a powerful mechanism to manage the configuration
      of disks on a node. This mechanism is partly based on the setup_storage module of <link
      xlink:href="http://fai-project.org/___blank___">FAI</link>. It basically allows for any
      automatic setup of your hard drives including kernel software RAID (md) and
      <firstterm>LVM</firstterm> setups. A detailed description of the syntax for disk
      configurations is <link xlink:href="http://fai-project.org/doc/man/setup-storage.html">
      available</link>. Since the OS of a <productname>Qlustar</productname> node is always
      running from RAM, a disk-less configuration is obviously also possible. Note, that for
      flawless operation this requires some extra configuration (handling of log messages and
      in/output of batch jobs) that will be explained in the
      <productname>Qlustar</productname> admin guide. Valid configurations require
      definitions for two filesystems /var and /scratch as well as swap space (see
      examples). To permit the initial formatting of a new disk configuration on a node, it
      must have assigned the <parameter>Schedule Format: always</parameter> generic property
      during the initial boot (see the discussion <xref linkend="PropConf-Sets"
      endterm="PropConf-Sets"/>.
    </para>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/disk_config/main.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Creating/editing disk configs
        </phrase></textobject>
        <caption><para>
          Creating/editing disk configs
        </para></caption>
      </mediaobject>
      Disk configurations can be managed using the <classname>Disk Configs</classname> dialog
      accessible from the main menu <guimenuitem>Manage
      Configs</guimenuitem>-><guimenuitem>Disk Configs</guimenuitem>. You can select the
      config to be viewed/edited from the drop-down menu at the bottom left. A couple of
      example configurations are created during the installation. Note that there are two
      special configs: (a) "disk-less" (not editable or deletable) and (b) "default"
      (editable but not deletable). The default config is used for any node that doesn't have
      a specific assignment to a disk config (via a Host Template, config set). The
      configuration itself can be edited in the text field at the top of the dialog and
      should conform to setup_storage syntax (see above). New configs can be created by
      choosing <guimenuitem>new disk config</guimenuitem> from the drop-down menu. As usual,
      enter the name of the new config in the text field and fill in the contents and
      description.
    </para>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/disk_config/edit.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Editing a disk config
        </phrase></textobject>
        <caption><para>
          Editing a disk config
        </para></caption>
      </mediaobject>
      To prevent multiple persons from editing at the same time and overwriting each others
      changes accidentally you must acquire a lock for the template by clicking the
      <guibutton>Edit</guibutton> button. If another user is already editing the file the
      button will be ghosted and the tool tip will show which user is holding a lock for the
      disk config.
    </para>
    <mediaobject>
      <imageobject><imagedata
      fileref="images/disk_config/save.png"
      width="85%" format="PNG"/></imageobject>
      <textobject><phrase>
        Saving a disk config
      </phrase></textobject>
      <caption><para>
        Saving a disk config
      </para></caption>
    </mediaobject>
    <para>
      After having finished editing a template, don't forget to save your changes by clicking
      the <guibutton>Save</guibutton> button. It will be ghosted, if there is nothing to
      save. You can undo all your changes up to the last time the template was saved by
      clicking the <guibutton>Undo</guibutton> button. In case another admin has made changes
      to a disk config while you are viewing or editing it, the <guibutton>Refresh</guibutton>
      button will become enabled. By clicking it, the updated disk config is shown and you loose
      any unsaved changes you have already made in your own edit field. To delete a disk config
      click the <guibutton>Delete</guibutton> button.
    </para>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/template/lock_expire.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Lock expiration pop-up
        </phrase></textobject>
        <caption><para>
          Lock expiration pop-up
        </para></caption>
      </mediaobject>
      The template lock expires automatically after some time without activity so that the
      template is not deadlocked if someone forgets to release the lock. In such a case the
      above dialog will be shown notifying you about it. By selecting
      <guibutton>OK</guibutton> a new lock will be requested. If another user is editing the
      template at that time though the request will fail and an error dialog will inform you
      of the failure.
    </para>
  </section>
  <section xml:id="sec-Network-FS-Mounts-overview">
    <title>Network Filesystem Exports/Mounts</title>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/network_fs_mounts/overview.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Network FS Mounts overview
        </phrase></textobject>
        <caption><para>
          Network FS Mounts overview
        </para></caption>
      </mediaobject>
      <application>QluMan</application> also supports the configuration and management of
      Network Filesystem (FS) and bind mounts for cluster nodes. The setup for this consists of two
      parts: 1) For Network Filesystems a Filesystem Export resource must be defined using the dialog at
      <guimenuitem>Manage Cluster</guimenuitem>-><guimenuitem>Filesystem Exports</guimenuitem>.
      2) A Network FS Mounts config must be created using the dialog at <guimenuitem>Manage
      Configs</guimenuitem>-><guimenuitem>Network FS Mounts</guimenuitem>. Such a config may
      contain multiple network and bind mount definitions and as with other config classes, it can then
      be assigned to nodes through the Global or a Host Template, Config Set or direct
      assignment.
    </para>
    <section xml:id="sec-Filesystem-Exports">
      <title>Filesystem Exports</title>
      <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/filesystem_exports/filesystem_exports__new.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Creating a new FS export
        </phrase></textobject>
        <caption><para>
          Creating a new FS export
        </para></caption>
      </mediaobject>
        The Filesystem Exports dialog shows the list of exported filesystems by name and
        filesystem type. Selecting an entry will show the details for this filesystem export on
        the right. A new Filesystem Export resource can be added by clicking the
        <guibutton>New</guibutton> button. This requires choosing a unique name that will be
        used inside Qluman to identify the resource. The <emphasis>Resource Name</emphasis>
        field will turn green if the entered name is unique. Qluman currently supports three
	types of network filesystems: NFS, Lustre and BeeGFS. The Fileystem type of the
	resource can be selected from the drop down menu.
      </para>
      <para>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/filesystem_exports/filesystem_exports__new2.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Defining export properties
	  </phrase></textobject>
	  <caption><para>
	    Defining export properties
	  </para></caption>
	</mediaobject>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/filesystem_exports/filesystem_exports__edit.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Saving the export resource
	  </phrase></textobject>
	  <caption><para>
	    Saving the export resource
	  </para></caption>
	</mediaobject>
        Next the server exporting the filesystem has to be selected. The default is beosrv-c,
        the cluster-internal hostname of the head-node, as the most likely server to export a
        filesystem. The server can be selected from a list of servers used for other exports
        using the drop-down menu. To use a new server, the name has to be entered manually. It
        can be any hostname known to Qluman. The <guilabel>Server</guilabel> label will turn
        green if the entered name is a known host. This includes all nodes configured in the
        Enclosure View and any cluster-external host defined in <guimenuitem>Manage
        Cluster</guimenuitem>-><guimenuitem>Global Settings</guimenuitem>-><guimenuitem>Network
        Settings</guimenuitem>.
      </para>
      <para>
	The remaining options depend on the selected fileystem type. In case of NFS the path of
	the filesystem to be exported on the server has to be entered. Because the path will later
	be used in a systemd mount unit file, there are some restrictions on the syntax. For
	example the path must start with a "/" and must not have a trailing "/". The
	<guilabel>Path</guilabel> will turn green if the path is acceptable and red otherwise.
      </para>
      <para>
	In the case of Lustre the fileystem name has to be specified. Lustre limits this name to
	eight characters and again too avoid complications in the systemd mount unit file later
	only alphanumeric characters and some punctuations will be accepted.
      </para>
      <para>
	In the case of BeeGFS there are no further options. Once all fields are entered correctly,
	the <guibutton>OK</guibutton> button will be enabled and the Filesystem Export can be
	added. It will then appear in the Filesystem Exports window.
      </para>
      <para>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/filesystem_exports/filesystem_exports__network_priority.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Networks available for an export
	  </phrase></textobject>
	  <caption><para>
	    Networks available for an export
	  </para></caption>
	</mediaobject>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/filesystem_exports/filesystem_exports__network_priority__add.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Adding a network for an export
	  </phrase></textobject>
	  <caption><para>
	    Adding a network for an export
	  </para></caption>
	</mediaobject>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/filesystem_exports/filesystem_exports__network_priority__remove.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Removing a network for an export
	  </phrase></textobject>
	  <caption><para>
	    Removing a network for an export
	  </para></caption>
	</mediaobject>
        Qluman automatically adds the networks available on the selected server to the Network
        priorities. Later, when a node boots and requests its config files from the head-node,
        the networks available on the client are checked against this list and the first common
        entry is used for the network path via which filesystem will be mounted. Shown entries
        can be removed or additional networks added from the context menu. Entries can also be
        moved up or down using drag and drop. This is useful e.g. to ensure that an NFS export
        is mounted via Infiniband/RDMA on all hosts that are connected to the IB fabric and via
        Ethernet on nodes without IB.
      </para>
      <note>
	<para>
	  If the selected server is cluster-external, it will obviously not have a choice of
	  network priorities.
	</para>
      </note>
    </section>
    <section xml:id="sec-Network-FS-Mounts">
      <title>Network Filesystem Mounts</title>
      <para>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/network_fs_mounts/network_fs_mounts.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Adding a Network FS Mounts config
	  </phrase></textobject>
	  <caption><para>
	    Adding a Network FS Mounts config
	  </para></caption>
	</mediaobject>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/network_fs_mounts/new.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Config Name
	  </phrase></textobject>
	  <caption><para>
	    Config Name
	  </para></caption>
	</mediaobject>
        Once Filesystem Exports have been defined, they can be used to configure Network FS
        Mount configs. Each config is a collection of filesystems mounts combined with their
        mount options. As ususal, such a config can be assigned to hosts either directly or
        indirectly through a template. Only one Network FS Mount config can be assigned per
        host, so all mounts that should be available on the booted node must be added to
        it. Click the <guibutton>New Config</guibutton> button to create a new Network FS Mount
        config.
      </para>
      <para>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/network_fs_mounts/select.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Select a Network FS Mounts config
	  </phrase></textobject>
	  <caption><para>
	    Select a Network FS Mounts config
	  </para></caption>
	</mediaobject>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/network_fs_mounts/select_mountpoint.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Select a Mountpoint
	  </phrase></textobject>
	  <caption><para>
	    Select a Mountpoint
	  </para></caption>
	</mediaobject>
	A newly created Network FS Mounts config will be automatically selected for viewing and
	editing. Previously defined configs may be selected from the drop-down menu in the top
	left. Below that, the list of mountpoints for the selected config is shown along with
	the filesystem type for each mount. Selecting one of the mountpoints will show its
	configuration details on the right.
      </para>
      <para>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/network_fs_mounts/add_mountpoint.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Adding/deleting a mount
	  </phrase></textobject>
	  <caption><para>
	    Adding/deleting a mount
	  </para></caption>
	</mediaobject>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/network_fs_mounts/add_mountpoint2.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Select the export resource
	  </phrase></textobject>
	  <caption><para>
	    Select the export resource
	  </para></caption>
	</mediaobject>
	A mount definition can be deleted or a new one added to the config from the context
	menu. To define a new one, enter the path where the filesystem should be mounted in
	the Mount Filesystem dialog. Also select one of the Filesystem Export resources
	declared earlier from the drop-down menu. In most cases this information is already
	sufficient. The next time when a node assigned to this Network FS Mounts config boots,
	it will mount this filesystem.
      </para>
      <!--cbox(file: network_fs_mounts/add_bind.png caption: Adding a bind mount)-->
      <!--cbox(file: network_fs_mounts/add_bind2.png caption: Select the path to bind mount)-->
      <para>
        A bind mount can be added in a similar way. Except instead of selecting a external
        resource to mount a local path has to be specified. Qluman-qt is unable to verify
        the specified source path exists so it is worth double checking before adding the
        bind mount.
      </para>
      <section xml:id="sec-Network-FS-Mounts-options-common">
        <title>Advanced common mount options</title>
        <para>
          <!--cbox(file: network_fs_mounts/options-common.png caption: Advanced common mount options)-->
	  <mediaobject>
	    <imageobject><imagedata
	    fileref="images/network_fs_mounts/network_override.png"
	    width="85%" format="PNG"/></imageobject>
	    <textobject><phrase>
	      Overriding the Network
	    </phrase></textobject>
	    <caption><para>
	      Overriding the Network
	    </para></caption>
	  </mediaobject>
          <!--cbox(file: network_fs_mounts/options-rdma.png caption: Stop RDMA from being used)-->
	  <mediaobject>
	    <imageobject><imagedata
	    fileref="images/network_fs_mounts/custom-options.png"
	    width="85%" format="PNG"/></imageobject>
	    <textobject><phrase>
	      Setting custom mount options
	    </phrase></textobject>
	    <caption><para>
	      Setting custom mount options
	    </para></caption>
	  </mediaobject>
          To set special options for a filesystem mount, first select the corresponding
	  mountpoint from the list on the left. Once selected there are advanced options
          that can be set common to all filesystem types (except bind mounts have even less). 
          <itemizedlist>
	    <listitem>
	      <para>
	        The automatic selection of the network used to mount the filesystem may be
	        overridden. First the override must be activated by setting the check-mark for
	        <guilabel>Override Network</guilabel>. A network can then be selected from the
	        drop-down menu to force the mount to use this particular one regardless of what
	        the network priorities of the associated export resource say.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
                Qluman will automatically detect if an IB network is being used to mount a
                Network FS and will use RDMA (remote direct memory access) for improved
                performance at lower CPU load. To mount a Network FS without using RDMA
                that feature has to be disabled for the mount by clearing the
                <guibutton>Allow RDMA</guibutton> checkbox.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
	        Last, any option that the mount command accepts for an mount can be set in
	        the <guilabel>Mount Options</guilabel> field. There are too many of them to
	        explain them all here. Please refer to <command>man mount</command> for the
                full list of possible options and their meaning.
	      </para>
	    </listitem>
	  </itemizedlist>
          After editing either the the mount options, be sure to press <keycap>return</keycap>,
          or click the <guibutton>Save</guibutton> button to save the changes.
        </para>
        <note>
	  <para>
	    Filesystems are only mounted on boot. Any changes made to a Network FS Mount
            config of a node will therefore only take affect the next time it boots.
	  </para>
        </note>
      </section>
      <section xml:id="sec-Network-FS-Mounts-options-nfs">
        <title>Advanced NFS mount options</title>
        <para>
	  <mediaobject>
	    <imageobject><imagedata
	    fileref="images/network_fs_mounts/subdir.png"
	    width="85%" format="PNG"/></imageobject>
	    <textobject><phrase>
	      Mounting a subdirectory of a resource
	    </phrase></textobject>
	    <caption><para>
	      Mounting a subdirectory of a resource
	    </para></caption>
	  </mediaobject>
          For NFS filesystems a subdirectory can be added to the
          <guilabel>Source Path</guilabel> to mount just a part of the exported filesystem.
        </para>
        <para>
          There are also a number of custom mount options specific to NFS. Please refer to
          <command>man nfs</command> for the full list of possible options and their meaning.
          After editing either the source path or the mount options, be sure to press
	  <keycap>return</keycap>, or click the <guibutton>Save</guibutton> button to save
          the changes.
        </para>
      </section>
      <section xml:id="sec-Network-FS-Mounts-options-lustre">
        <title>Advanced Lustre mount options</title>
        <para>
          <!--cbox(file: network_fs_mounts/options-lustre.png caption: )-->
          <!--cbox(file: network_fs_mounts/options-lustre-add.png caption: )-->
          For Lustre filesystems some advanced client options are set as kernel module
          options. Qluman-qt will have some options and their default values pre-defined.
          These can be added using the context menu in the <guilabel>Kernel Module
          Options</guilabel> box. Other options or values must be added using the
          <guibutton>Kernel Module Options Editor</guibutton> first. This works the same
          way as the property editor shown in <link linkend="Generic-Properties">property
          editor</link>. New options must take the form
          <literal>module_name:option_name</literal>. Please refer to the Lustre
          documentation for a list of available options and their meaning.
        </para>
        <note>
          <para>
            New Lustre filesystem mounts automatically <literal>localflock</literal> set
            as a custom mount option. If other lock behaviour is desired this entry can
            be changed.
          </para>
        </note>
      </section>
      <section xml:id="sec-Network-FS-Mounts-options-beegfs">
        <title>Advanced BeeGFS mount options</title>
        <para>
          <!--cbox(file: network_fs_mounts/options-beegfs.png caption: )-->
          <!--cbox(file: network_fs_mounts/options-beegfs-add.png caption: )-->
          BeeGFS clients allow a lot of customization. For most options the default values
          are sufficient and don't have to be explicitly set. Anything diverging from
          the defaults can be added in the <guilabel>BeeGFS Client Options</guilabel> box.
          Most likely option to add is the sysXAttrEnabled option to enable the use of
          extended attributes in the filesystem.
        </para>
        <para>
          <!--cbox(file: network_fs_mounts/options-beegfs-tooltip.png caption: )-->
          <!--cbox(file: network_fs_mounts/options-beegfs-editor.png caption: )-->
          The pre-defined BeeGFS Client Options are generated from upstreams example
          configuration. Each option should have a description that can be seen when
          hovering over an option. The description can also be seen in the BeeGFS Client
          Options Editor for each option. The editor can be opened by clicking the
          <guibutton>BeeGFS Client Options Editor</guibutton> button and works the same way
          as the property editor shown in <link linkend="Generic-Properties">property
          editor</link>.
        </para>
        <para>
          For options where a default is provided in the example config the default will
          be pre-defined and immutable in qluman-qt. In case of boolean options both true and
          false will be pre-defined regardless of the default. For other options additional
          values must be added in the editor before they can be added to a client.
        </para>
        <note>
          <para>
            Options with no default, like connAuthFile, will have no value pre-defined and
            won't show up in the context menu unless a value is added through the editor.
          </para>
        </note>
      </section>
    </section>
  </section>
</chapter>
