<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter [
<!ENTITY % BOOK_ENTITIES SYSTEM "QluMan_Guide.ent">
%BOOK_ENTITIES;
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % DOCBOOK_ENTS PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "/usr/share/xml/docbook/schema/dtd/4.5/dbcentx.mod">
%DOCBOOK_ENTS;
]>
<chapter xmlns="http://docbook.org/ns/docbook"
	 xmlns:xlink="http://www.w3.org/1999/xlink"
	 xmlns:xi="http://www.w3.org/2001/XInclude"
	 xml:id="chap-Config-Classes">
  <title>Common Config Classes</title>
  <section xml:id="sec-Config-Classes-Overview">
    <title>Overview</title>
    <para>
      <classname>Config Classes</classname> manage configurations that are too complex to fit
      into the key + value scheme used by properties. Therefore, there is no common interface
      to configure all classes. Instead, each class has its own configuration dialog,
      presenting the specific options it provides. Furthermore, some classes depend on
      sub-classes (e.g. <classname>Boot Configs</classname> depend on <classname>Qlustar
      Images</classname>). Only the top-level <classname>Config Classes</classname> are
      directly assignable to a <classname>Config Set</classname> or a host. Sub-classes are
      assigned indirectly via their parent class. Most of the functional subsystems of
      <productname>Qlustar</productname> have a dedicated <classname>Config
      Class</classname>. Currently, there are five of them: <classname>Network</classname>,
      <classname>Boot</classname>, <classname>DHCP</classname>, <classname>Disk</classname>,
      and <classname>Slurm Configs</classname> (Slurm is optional) complemented by a single
      sub-class, <classname>Qlustar Images</classname>. Please note that the
      <classname>Network Configs</classname> has already been described in a <link
      linkend="sec-Network-Configs">previous chapter</link>
    </para>
  </section>
  <section xml:id="sec-Writing-Config-Files">
    <title>Writing Config Files</title>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/write_files/main.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          The Write Files Preview dialog
        </phrase></textobject>
        <caption><para>
          The Write Files Preview dialog
        </para></caption>
      </mediaobject>
      Many of the configurations managed in the <application>QluMan</application> GUI via
      <classname>Config Classes</classname> and sub-classes are translated into automatically
      generated configuration files located in the filesystem of the head-node(s). While
      <application>QluMan</application> configuration options are usually saved in the
      <application>QluMan</application> database immediately after they have been entered in
      the GUI, the write process of the real configuration files on disk is a separate step,
      that needs to be explicitly initiated and confirmed.
    </para>
    <para>
      Each configuration dialog of a <classname>Config Class</classname> has a
      <guibutton>Preview</guibutton> button that opens the <classname>Write Files</classname>
      window with its own config files already expanded. If a <classname>Config
      Class</classname> has no pending changes, the <guibutton>Preview</guibutton> button
      becomes a <guibutton>View</guibutton> button, while its function remains the same.
    </para>
    <note>
      <para>
	The <classname>Write Files</classname> window as described here, was introduced only in
	QluMan version 11.0.3.1. If you are running an older version, you should either update
	or consult the 10.1 version of the QluMan guide for documentation about this particular
	feature.
      </para>
    </note>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/write_files/write_files_button.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          The Write Files button.
        </phrase></textobject>
        <caption><para>
          The Write Files button.
        </para></caption>
      </mediaobject>
      The <classname>Write Files</classname> window can also be opened from <guimenuitem>Manage
      Cluster</guimenuitem>-><guimenuitem>Write Files</guimenuitem> or via the <guibutton>Write
      Files</guibutton> button at the bottom right of the main window. This button is an
      indicator for the presence of pending changes: It is grayed out if there aren't any, and
      fully visible otherwise.
    </para>
    <para>      
      <mediaobject>      
        <imageobject><imagedata      
        fileref="images/write_files/write_none.png"      
        width="85%" format="PNG"/></imageobject>      
        <textobject><phrase>      
          No pending changes      
        </phrase></textobject>      
        <caption><para>      
          No pending changes      
        </para></caption>      
      </mediaobject>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/write_files/write_all.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Write changed file classes
        </phrase></textobject>
        <caption><para>
          Write changed file classes
        </para></caption>
      </mediaobject>
      When the <classname>Write Files</classname> window is opened, on the left it shows the
      list of all QluMan <classname>Config Classes</classname> that may be written. Each
      <classname>Config Class</classname> has a status LED. It is red if there are changes
      pending to be written, otherwise green. The files of all <classname>Config
      Classes</classname> with pending changes can be written by clicking the <guibutton>Write
      Changed</guibutton> button at the bottom. It will be grayed out if there are no changes.
    </para>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/write_files/write_selected.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Selecting files to write
        </phrase></textobject>
        <caption><para>
          Selecting files to write
        </para></caption>
      </mediaobject>
      <classname>Config Classes</classname> can also be written individually by setting the
      check-mark before each class. This converts the button at the bottom to <guibutton>Write
      Selected</guibutton>. Pressing it will then write the files of all checked classes
      regardless of whether they have changes or not.
    </para>
    <note>
      <para>
	Writing a <classname>Config Class</classname> without changes is sometimes desirable to
	restart its related service, like e.g. the slurm daemon for the Slurm Config class.
      </para>
    </note>
    <note>
      <para>
	The actual write command is performed via the <link linkend="chap-RX-Engine">Qlustar
	RXengine</link>. This allows for <emphasis role="bold">consistent management</emphasis>
	of multiple head-nodes e.g. in a high-availability configuration.
      </para>
    </note>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/write_files/expand.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Expanding
        </phrase></textobject>
        <caption><para>
          Expanding
        </para></caption>
      </mediaobject>
      Before writing the generated files for each <classname>Config Class</classname>, they can
      be inspected by expanding their entry in the tree view. Under the hood, this expansion
      initiates a request by the GUI to the QluMan server, asking to send the generated files
      together with a diff against the current files on disk. For the latter to work, the execd
      on the Headnode needs to be up and running.
    </para>
    <para>
      The generated files are shown in a tree structure where nodes represent directories and
      leafs the individual files. For compactness, directories with only one entry are combined
      <mediaobject>
        <imageobject><imagedata
        fileref="images/write_files/diff.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Displaying the diff of pending changes.
        </phrase></textobject>
        <caption><para>
          Displaying the diff of pending changes.
        </para></caption>
      </mediaobject>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/write_files/no_diff.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          A file with no pending changes.
        </phrase></textobject>
        <caption><para>
          A file with no pending changes.
        </para></caption>
      </mediaobject>
      into a single node. Each entry has its own status LED. It's red if there are changes
      pending to be written, otherwise green. A red-green LED is shown if some files in a
      directory have changes and some do not. Selecting a file will show its contents on the
      right. If changes are pending, a diff of the changes will also be shown below that.
    </para>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/write_files/prev_next.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Scanning through all config files
        </phrase></textobject>
        <caption><para>
          Scanning through all config files
        </para></caption>
      </mediaobject>
      Besides selecting files from the tree, there is also a second method of navigating
      between files. At the bottom of the right side, there are two arrow buttons that will
      switch to the previous and next file in the tree respectively. This allows to quickly
      browse through all files with single clicks without having to move the mouse. Per
      default, the <guibutton>Prev</guibutton> and <guibutton>Next</guibutton> buttons will
      cycle through all files. After checking the <guibutton>Only changed files</guibutton>
      checkbox, only files with pending changes will be switched to.
    </para>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/write_files/refresh.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Refreshing the display after changes were committed.
        </phrase></textobject>
        <caption><para>
          Refreshing the display after changes were committed.
        </para></caption>
      </mediaobject>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/write_files/write_refresh.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Changes are not written before having refreshed.
        </phrase></textobject>
        <caption><para>
          Changes are not written before having refreshed.
        </para></caption>
      </mediaobject>
      While the <classname>Write Files</classname> window is open, further changes may have
      been made to the cluster configuration, either by the current user or another one. The
      <classname>Write Files</classname> window will detect this. As a result, a yellow
      component will be added to all LEDs and the <guibutton>Refresh</guibutton> button at the
      bottom be activated . Until the latter is clicked, the displayed information will not
      reflect the latest changes and trying to write will also fail with an error message. This
      is to prevent the activation of files with a content that is different from what has been
      previewed.
    </para>
    <note>
      <para>
	Generating the files for each <classname>Config Class</classname> can be an expensive
	operation on large clusters. This is therefore not done automatically after every
	change. Instead, the server has a rough idea about what changes will affect each
	<classname>Config Class</classname> and will simply flag the relevant ones as being a
	candidate for having changed files. Generating the actual files is then delayed for 10
	seconds and might find that no changes will actually occur.
      </para>
      <para>
	This delay reduces the load on the server if multiple changes are made within a short
	time. The downside of it is that the LEDs can turn red or yellow for a short time, even
	though no actual change exists. Clicking the <guibutton>Refresh</guibutton> button in
	this situation will abort the delay and generate the files for each <classname>Config
	Class</classname> immediately.
      </para>
    </note>
    <section xml:id="sec-Host-Specific-Configs">
      <title>Host-specific Configs</title>
      <para>
	<mediaobject>
          <imageobject><imagedata
          fileref="images/enclosure_view/preview_config.png"
          width="85%" format="PNG"/></imageobject>
          <textobject><phrase>
            Initiating a preview of host specific config files
          </phrase></textobject>
          <caption><para>
            Initiating a preview of host specific config files
          </para></caption>
	</mediaobject>
	<mediaobject>
          <imageobject><imagedata
          fileref="images/enclosure_view/preview_config2.png"
          width="85%" format="PNG"/></imageobject>
          <textobject><phrase>
            Preview of host specific config files
          </phrase></textobject>
          <caption><para>
            Preview of host specific config files
          </para></caption>
	</mediaobject>
	Various configurations managed in the <application>QluMan</application> GUI via
	<classname>Config Classes</classname> and sub-classes translate into automatically
	generated configuration files for the individual hosts. In the pre-systemd phase of
	their boot process, these files will be sent to them and written by their
	<application>execd</application>. At this stage, there is no general update mechanism
	concerning these files for running nodes and changes only take effect during the next
	boot. A preview of the generated configs can be initiated by selecting
	<guimenuitem>Preview config</guimenuitem> from the host's context menu. More than one
	host may be selected for this.
      </para>
      <note>
	<para>
	  Changes to the current config files of a host will only be shown if the host is
	  online. If the host is offline (for example due to network problems) but not powered
	  down, possible changes might not be shown.
	</para>
      </note>
    </section>
  </section>
  <section xml:id="sec-Boot-Configs">
    <title>Boot Configs</title>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/boot_config/collapsed.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Boot Config dialog
        </phrase></textobject>
        <caption><para>
          Boot Config dialog
        </para></caption>
      </mediaobject>
      The <classname>Boot Config</classname> dialog allows to define settings for the PXE/tftp
      boot server. A boot configuration determines which <link
      linkend="sec-Qlustar-OS-Images">Qlustar OS image</link> is delivered to a node, and
      optionally permits the specification of <firstterm>PXELinux</firstterm> commands and/or
      Linux kernel parameters. When opened, the <classname>Boot Config</classname> window shows
      a collapsed tree-list of all boot configs currently defined, sorted by their names.
    </para>
    <note>
      <para>
	Note that the <classname>default config</classname> is special: It applies to any node
	without a specifically assigned (either through a template or directly) <classname>Boot
	Config</classname>. This means, that in the simplest configuration, where all nodes
	should boot identically, having just the <classname>default config</classname> will be
	sufficient.
      </para>
    </note>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/boot_config/context_menu.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Changing a Boot Config
        </phrase></textobject>
        <caption><para>
          Changing a Boot Config
        </para></caption>
      </mediaobject>
      By expanding a <classname>Boot Config</classname> item, the configured
      <productname>Qlustar</productname> image, PXELinux command, and kernel parameters become
      visible. You can change any of the values, by simply selecting a different option from
      the drop-down menus. In case of kernel parameters, you can also directly edit the entry
      and save the result by pressing <keycap>return</keycap>. Furthermore, it is possible to
      add multiple kernel parameters or remove them through the context menu. Each selected
      kernel parameter will be added to the kernel command line.
    </para>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/boot_config/new.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Creating new Boot Configs
        </phrase></textobject>
        <caption><para>
          Creating new Boot Configs
        </para></caption>
      </mediaobject>
      The context menu also lets you create new <classname>Boot Configs</classname> and edit or
      delete an existing one. Alternatively, a new <classname>Boot Config</classname> can be
      created by clicking the <guibutton>New</guibutton> button at the bottom of the
      dialog. Both, the context menu and the button bring up the <classname>New Boot
      Config</classname> dialog. Simply enter the name and description for the new config,
      select a Qlustar image and (optionally) a PXELinux command. Finally press
      <guibutton>OK</guibutton> to create it. The new config will then appear in the
      <classname>Boot Config</classname> window and will be ready for use.
    </para>
    <para>
      Pressing the <guibutton>Boot Parameter Editor</guibutton> button at the bottom of the
      dialog, will bring up a small edit dialog, where kernel parameters can be created,
      edited, or deleted.
    </para>
  </section>
  <section xml:id="sec-Disk-Configs">
    <title>Disk Configs</title>
    <para>
      <productname>Qlustar</productname> has a powerful mechanism to manage the configuration
      of disks on a node. It basically allows for any automatic setup of your hard drives
      including any ZFS/zpool variant, kernel software RAID (md) and <firstterm>LVM</firstterm>
      setups.
    </para>
    <note>
      <para>
	Non-ZFS setups use a mechanism that is partly based on the setup_storage module of
	<link xlink:href="http://fai-project.org/___blank___">FAI</link>. A detailed
	description of the syntax for disk configurations is <link
	xlink:href="http://fai-project.org/doc/man/setup-storage.html___blank___">available</link>.
      </para>
    </note>
    <para>
      Since the OS of a <productname>Qlustar</productname> net-boot node is always running from
      RAM, a disk-less configuration is obviously also possible. Valid disk configurations
      require definitions for two filesystems /var and /scratch, swap space is optional (see
      examples). To permit the initial formatting of a new disk configuration on a node, it
      must have assigned the <parameter>Schedule Format: always</parameter> <link
      linkend="sec-PropConf-Sets">generic property</link> during the initial boot.
    </para>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/disk_config/main.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Creating/editing disk configs
        </phrase></textobject>
        <caption><para>
          Creating/editing disk configs
        </para></caption>
      </mediaobject>
      Disk configurations can be managed using the <classname>Disk Configs</classname> dialog
      accessible from the main menu <guimenuitem>Manage
      Configs</guimenuitem>-><guimenuitem>Disk Configs</guimenuitem>. You can select the config
      to be viewed/edited from the drop-down menu at the bottom left. A couple of example
      configurations are created during the installation. Note that there are two special
      configs: (a) <literal>disk-less</literal> (not editable or deletable) and (b)
      <literal>default</literal> (editable but not deletable). The default config is used for
      any node that doesn't have a specific assignment to a disk config (via a Host Template,
      config set).
    </para>
    <para>
       The configuration itself can be edited in the text field at the top of the dialog. New
       configs can be created by choosing <guimenuitem>new disk config</guimenuitem> from the
       drop-down menu. As usual, enter the name of the new config in the text field and fill in
       the contents and description.
    </para>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/disk_config/edit.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Editing a disk config
        </phrase></textobject>
        <caption><para>
          Editing a disk config
        </para></caption>
      </mediaobject>
      To prevent multiple QluMan users from editing the same config simultaneously and
      overwriting each others changes accidentally, a lock must be acquired for the template by
      clicking the <guibutton>Edit</guibutton> button. If another user is already editing the
      config, the button will be ghosted and the tool-tip will show which user is holding a
      lock for it.
    </para>
    <para>
    <mediaobject>
      <imageobject><imagedata
      fileref="images/disk_config/save.png"
      width="85%" format="PNG"/></imageobject>
      <textobject><phrase>
        Saving a disk config
      </phrase></textobject>
      <caption><para>
        Saving a disk config
      </para></caption>
    </mediaobject>
      After having finished editing a template, don't forget to save your changes by clicking
      the <guibutton>Save</guibutton> button. It will be ghosted, if there is nothing to
      save. You can undo all your changes up to the last time the template was saved by
      clicking the <guibutton>Undo</guibutton> button. In case another admin has made changes
      to a disk config while you are viewing or editing it, the <guibutton>Refresh</guibutton>
      button will become enabled. By clicking it, the updated disk config is shown and you
      loose any unsaved changes you have already made in your own edit field. To delete a disk
      config click the <guibutton>Delete</guibutton> button.
    </para>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/template/lock_expire.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Lock expiration pop-up
        </phrase></textobject>
        <caption><para>
          Lock expiration pop-up
        </para></caption>
      </mediaobject>
      The template lock expires automatically after some time without activity so that the
      template is not dead-locked if someone forgets to release the lock. In such a case an
      info dialog will pop up to notify you about it. By selecting <guibutton>OK</guibutton> a
      new lock will be requested. If another user is starting to edit the template at exactly
      that time though, the request will fail and an error dialog will inform you of the
      failure.
    </para>
  </section>
  <section xml:id="sec-Network-FS-Mounts-overview">
    <title>Network Filesystem Exports/Mounts</title>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/network_fs_mounts/overview.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Network FS Mounts overview
        </phrase></textobject>
        <caption><para>
          Network FS Mounts overview
        </para></caption>
      </mediaobject>
      <application>QluMan</application> also supports the configuration and management of
      Network Filesystem (FS) and bind mounts for cluster nodes. The setup for this consists of
      two parts:
      <orderedlist>
	<listitem>
	  <para>
	    For a network FS, a <classname>Filesystem Exports</classname> resource must be
	    defined using the dialog at <guimenuitem>Manage
	    Cluster</guimenuitem>-><guimenuitem>Filesystem Exports</guimenuitem>.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    A <classname>Network FS Mounts</classname> config must be created using the dialog
	    at <guimenuitem>Manage Configs</guimenuitem>-><guimenuitem>Network FS
	    Mounts</guimenuitem>.
	  </para>
	</listitem>
      </orderedlist>
      Such a config may contain multiple network and bind mount definitions. As with other
      config classes, once defined, it can be assigned to nodes through the Global or a Host
      Template, Config Set or direct assignment.
    </para>
    <section xml:id="sec-Filesystem-Exports">
      <title>Filesystem Exports</title>
      <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/filesystem_exports/filesystem_exports__new.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Creating a new FS export
        </phrase></textobject>
        <caption><para>
          Creating a new FS export
        </para></caption>
      </mediaobject>
        The <classname>Filesystem Exports</classname> dialog shows the list of exported
        filesystems by name and FS type. Selecting an entry will show the details for this FS
        export on the right. A new <classname>Filesystem Exports</classname> resource can be
        added by clicking the <guibutton>New</guibutton> button. This requires choosing a
        unique name that will be used inside QluMan to identify the resource. The
        <emphasis>Resource Name</emphasis> field will turn green if the entered name is
        unique. QluMan currently supports three types of network filesystems:
        <classname>NFS</classname>, <classname>Lustre</classname> and
        <classname>BeeGFS</classname>. The FS type of the resource can be selected from the
        drop-down menu.
      </para>
      <para>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/filesystem_exports/filesystem_exports__new2.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Defining export properties
	  </phrase></textobject>
	  <caption><para>
	    Defining export properties
	  </para></caption>
	</mediaobject>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/filesystem_exports/filesystem_exports__edit.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Saving the export resource
	  </phrase></textobject>
	  <caption><para>
	    Saving the export resource
	  </para></caption>
	</mediaobject>
        Next the server exporting the FS has to be selected. The default is beosrv-c, the
        cluster-internal hostname of the head-node, as the most likely server to export a
        FS. Using the drop-down menu, the server can be selected from a list of servers already
        used for other exports. To use a new server, the name has to be entered manually. It
        can be any hostname known to Qluman. The <guilabel>Server</guilabel> label will turn
        green if the entered name is a known host. This includes all nodes configured in the
        Enclosure View and any cluster-external host defined in <guimenuitem>Manage
        Cluster</guimenuitem>-><guimenuitem>Global Settings</guimenuitem>-><guimenuitem>Network
        Settings</guimenuitem>.
      </para>
      <note>
	<para>
	  For a <classname>Lustre</classname> export resource the server(s) to be added are the
	  MGS server(s) where the management target is mounted. If your
	  <classname>Lustre</classname> FS is setup with high-availability, you can specify
	  multiple MGS servers.
	</para>
      </note>
      <note>
	<para>
	  For a <classname>BeeGFS</classname> export resource the name of the
	  <classname>BeeGFS</classname> management server is to be entered here.
	</para>
      </note>
      <para>
	The remaining options depend on the selected FS type. In case of
	<classname>NFS</classname>, the path of the FS to be exported on the server has to be
	entered. Because the path will later be used in a systemd mount unit file, there are
	some restrictions on the syntax. For example the path must start with a "/" and must
	not have a trailing "/". The <guilabel>Path</guilabel> label will turn green if the
	entered path is acceptable, otherwise it will turn red.
      </para>
      <para>
	For a <classname>Lustre</classname> resource, the <classname>Lustre</classname> FS name
	has to be specified. <classname>Lustre</classname> limits this name to eight characters
	and again, to avoid complications in the systemd mount unit file later, only
	alphanumeric characters and some punctuation will be accepted.
      </para>
      <para>
	In the case of <classname>BeeGFS</classname>, you have the option to define the TCP and
	UDP ports on which the management server listens for this FS resource. If the
	management server manages just one BeeGFS FS, the default ports are usually fine.
      </para>
      <para>
	Once all
	fields are entered correctly, the <guibutton>OK</guibutton> button will be enabled and
	the export definition can be added. It will then appear in the <classname>Filesystem
	Exports</classname> window.
      </para>
      <para>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/filesystem_exports/filesystem_exports__network_priority.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Networks available for an export
	  </phrase></textobject>
	  <caption><para>
	    Networks available for an export
	  </para></caption>
	</mediaobject>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/filesystem_exports/filesystem_exports__network_priority__add.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Adding a network for an export
	  </phrase></textobject>
	  <caption><para>
	    Adding a network for an export
	  </para></caption>
	</mediaobject>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/filesystem_exports/filesystem_exports__network_priority__remove.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Removing a network for an export
	  </phrase></textobject>
	  <caption><para>
	    Removing a network for an export
	  </para></caption>
	</mediaobject>
        Qluman automatically adds the networks available on the selected server(s) to the
        Network priorities. Later, when a node boots and requests its config files from the
        head-node, the networks available on the client are checked against this list and the
        first common entry is used for the network path via which the FS will be mounted. Shown
        entries can be removed or additional networks added from the context menu. Entries can
        also be moved up or down using drag&amp;drop. This is useful e.g. to ensure that an
        <classname>NFS</classname> export is mounted via Infiniband/RDMA on all hosts that are
        connected to the IB fabric and via Ethernet on nodes without IB.
      </para>
      <note>
	<para>
	  If the selected server is cluster-external, it will obviously not have a choice of
	  network priorities.
	</para>
      </note>
    </section>
    <section xml:id="sec-Network-FS-Mounts">
      <title>Network Filesystem Mounts</title>
      <para>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/network_fs_mounts/network_fs_mounts.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Adding a Network FS Mounts config
	  </phrase></textobject>
	  <caption><para>
	    Adding a Network FS Mounts config
	  </para></caption>
	</mediaobject>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/network_fs_mounts/new.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Config Name
	  </phrase></textobject>
	  <caption><para>
	    Config Name
	  </para></caption>
	</mediaobject>
        Once <classname>Filesystem Exports</classname> have been defined, they can be used to
        configure <classname>Network FS Mounts</classname> configs. Each config is a collection
        of filesystems mounts combined with their mount options. As usual, such a config can
        be assigned to hosts either directly or indirectly through a template. Only one
        <classname>Network FS Mounts</classname> config can be assigned per host, so all mounts
        that should be available on the booted node must be added to it. Click the
        <guibutton>New Config</guibutton> button to create a new <classname>Network FS
        Mounts</classname> config.
      </para>
      <para>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/network_fs_mounts/select.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Select a Network FS Mounts config
	  </phrase></textobject>
	  <caption><para>
	    Select a Network FS Mounts config
	  </para></caption>
	</mediaobject>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/network_fs_mounts/select_mountpoint.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Select a Mountpoint
	  </phrase></textobject>
	  <caption><para>
	    Select a Mountpoint
	  </para></caption>
	</mediaobject>
	A newly created <classname>Network FS Mounts</classname> config will be automatically
	selected for viewing and editing. Previously defined configs may be selected from the
	drop-down menu in the top left. Below that, the list of mountpoints for the selected
	config is shown along with the FS type for each mount. Selecting one of the
	mountpoints will show its configuration details on the right.
      </para>
      <para>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/network_fs_mounts/add_mountpoint.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Adding/deleting a mount
	  </phrase></textobject>
	  <caption><para>
	    Adding/deleting a mount
	  </para></caption>
	</mediaobject>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/network_fs_mounts/add_mountpoint2.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Select the export resource
	  </phrase></textobject>
	  <caption><para>
	    Select the export resource
	  </para></caption>
	</mediaobject>
	A mount definition can be deleted or a new one added to the config from the context
	menu. To define a new one, enter the path where the FS should be mounted in the Mount
	Filesystem dialog. Also select one of the <classname>Filesystem Exports</classname>
	resources declared earlier from the drop-down menu. In most cases this information is
	already sufficient. The next time when a node assigned to this <classname>Network FS
	Mounts</classname> config boots, it will mount this FS.
      </para>
      <para>
	<mediaobject>
          <imageobject><imagedata
          fileref="images/network_fs_mounts/add_bind.png"
          width="85%" format="PNG"/></imageobject>
          <textobject><phrase>
            Adding a bind mount
          </phrase></textobject>
          <caption><para>
            Adding a bind mount
          </para></caption>
	</mediaobject>
	<mediaobject>
          <imageobject><imagedata
          fileref="images/network_fs_mounts/add_bind2.png"
          width="85%" format="PNG"/></imageobject>
          <textobject><phrase>
            Defining the source path of a bind mount
          </phrase></textobject>
          <caption><para>
            Defining the source path of a bind mount
          </para></caption>
	</mediaobject>
        A bind mount can be added in a similar way. However, instead of selecting an external
        resource to be mounted, the source path of the bind has to be specified. QluMan is
        unable to verify the existence of the specified, so it is worth to double check before
        adding the bind mount config.
      </para>
      <section xml:id="sec-Network-FS-Mounts-options-common">
        <title>Advanced common mount options</title>
        <para>
          <mediaobject>
            <imageobject><imagedata
            fileref="images/network_fs_mounts/options-common.png"
            width="85%" format="PNG"/></imageobject>
            <textobject><phrase>
              Advanced common mount options
            </phrase></textobject>
            <caption><para>
              Advanced common mount options
            </para></caption>
          </mediaobject>
	  <mediaobject>
	    <imageobject><imagedata
	    fileref="images/network_fs_mounts/network_override.png"
	    width="85%" format="PNG"/></imageobject>
	    <textobject><phrase>
	      Overriding the Network
	    </phrase></textobject>
	    <caption><para>
	      Overriding the Network
	    </para></caption>
	  </mediaobject>
          <mediaobject>
            <imageobject><imagedata
            fileref="images/network_fs_mounts/options-rdma.png"
            width="85%" format="PNG"/></imageobject>
            <textobject><phrase>
              Stop RDMA from being used
            </phrase></textobject>
            <caption><para>
              Stop RDMA from being used
            </para></caption>
          </mediaobject>
	  <mediaobject>
	    <imageobject><imagedata
	    fileref="images/network_fs_mounts/custom-options.png"
	    width="85%" format="PNG"/></imageobject>
	    <textobject><phrase>
	      Setting custom mount options
	    </phrase></textobject>
	    <caption><para>
	      Setting custom mount options
	    </para></caption>
	  </mediaobject>
          To set special options for a FS mount, first select the corresponding
	  mountpoint from the list on the left. Once selected there are advanced options
          that can be set common to all FS types (except bind mounts have even less). 
          <itemizedlist>
	    <listitem>
	      <para>
	        The automatic selection of the network used to mount the FS may be
	        overridden. First the override must be activated by setting the check-mark for
	        <guilabel>Override Network</guilabel>. A network can then be selected from the
	        drop-down menu to force the mount to use this particular one regardless of what
	        the network priorities of the associated export resource say.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
                Qluman will automatically detect if an IB network is being used to mount a
                Network FS and will use RDMA (remote direct memory access) for improved
                performance at lower CPU load. To mount a Network FS without using RDMA
                that feature has to be disabled for the mount by clearing the
                <guibutton>Allow RDMA</guibutton> checkbox.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
	        Last, any option that the mount command accepts for a mount can be set in
	        the <guilabel>Mount Options</guilabel> field. There are too many of them to
	        explain them all here. Please refer to <command>man mount</command> for the
                full list of possible options and their meaning.
	      </para>
	    </listitem>
	  </itemizedlist>
          After editing either the the mount options, be sure to press <keycap>return</keycap>,
          or click the <guibutton>Save</guibutton> button to save the changes.
        </para>
        <note>
	  <para>
	    Filesystems are only mounted on boot. Any changes made to a <classname>Network FS
	    Mounts</classname> config of a node will therefore only take effect the next time
	    it boots.
	  </para>
        </note>
      </section>
      <section xml:id="sec-Network-FS-Mounts-options-nfs">
        <title>Advanced NFS mount options</title>
        <para>
	  <mediaobject>
	    <imageobject><imagedata
	    fileref="images/network_fs_mounts/subdir.png"
	    width="85%" format="PNG"/></imageobject>
	    <textobject><phrase>
	      Mounting a sub-directory of a resource
	    </phrase></textobject>
	    <caption><para>
	      Mounting a sub-directory of a resource
	    </para></caption>
	  </mediaobject>
          For <classname>NFS</classname> filesystems a sub-directory can be added to the
          <guilabel>Source Path</guilabel> to mount just a part of the exported FS.
        </para>
        <para>
          There are also a number of custom mount options specific to
          <classname>NFS</classname>. Please refer to <command>man nfs</command> for the full
          list of possible options and their meaning.  After editing either the source path or
          the mount options, be sure to press <keycap>return</keycap>, or click the
          <guibutton>Save</guibutton> button to save the changes.
        </para>
      </section>
      <section xml:id="sec-Network-FS-Mounts-options-lustre">
        <title>Advanced Lustre mount options</title>
        <para>
          <mediaobject>
            <imageobject><imagedata
            fileref="images/network_fs_mounts/options-lustre.png"
            width="85%" format="PNG"/></imageobject>
            <textobject><phrase>
              Lustre mount definition
            </phrase></textobject>
            <caption><para>
              Lustre mount definition
            </para></caption>
          </mediaobject>
          <mediaobject>
            <imageobject><imagedata
            fileref="images/network_fs_mounts/options-lustre-add.png"
            width="85%" format="PNG"/></imageobject>
            <textobject><phrase>
              Specifying Lustre kernel module parameters
            </phrase></textobject>
            <caption><para>
              Specifying Lustre kernel module parameters
            </para></caption>
          </mediaobject>
          For <classname>Lustre</classname> filesystems, some advanced settings may be set via
          kernel module parameters. QluMan pre-defines commonly used parameters together with
          their suggested default values. They may be added using the context-menu in the
          <guilabel>Kernel Module Options</guilabel> box. Additional options or values can be
          added using the <guibutton>Kernel Module Options Editor</guibutton>. This works the
          same way as for <link linkend="Generic-Properties">generic properties</link>. New
          options must take the form <literal>module_name:option_name</literal>. Please refer
          to the <classname>Lustre</classname> documentation for a list of available parameters
          and their meaning.
        </para>
        <note>
          <para>
            Per default, new <classname>Lustre</classname> FS mounts have activated the custom
            mount option <literal>localflock</literal>. If another lock behavior is desired,
            this entry can easily be changed.
          </para>
        </note>
      </section>
      <section xml:id="sec-Network-FS-Mounts-options-beegfs">
        <title>Advanced BeeGFS mount options</title>
        <para>
          <mediaobject>
            <imageobject><imagedata
            fileref="images/network_fs_mounts/options-beegfs.png"
            width="85%" format="PNG"/></imageobject>
            <textobject><phrase>
               BeeGFS mount definition
            </phrase></textobject>
            <caption><para>
               BeeGFS mount definition
            </para></caption>
          </mediaobject>
          <mediaobject>
            <imageobject><imagedata
            fileref="images/network_fs_mounts/options-beegfs-add.png"
            width="85%" format="PNG"/></imageobject>
            <textobject><phrase>
              Adding a BeeGFS client option
            </phrase></textobject>
            <caption><para>
              Adding a BeeGFS client option
            </para></caption>
          </mediaobject>
          <classname>BeeGFS</classname> clients allow a lot of customization. For most options,
          the default values are sufficient and don't have to be explicitly set. Anything
          diverging from the defaults, can be added via the <guilabel>BeeGFS Client
          Options</guilabel> box.  The most likely options to add are
          <literal>quotaEnabled</literal> (to enable the support of quota),
          <literal>sysACLsEnabled</literal> (to enable the support of POSIX ACLs) and
          <literal>sysXAttrEnabled</literal> (to enable the support of extended attributes).
        </para>
        <para>
          <mediaobject>
            <imageobject><imagedata
            fileref="images/network_fs_mounts/options-beegfs-tooltip.png"
            width="85%" format="PNG"/></imageobject>
            <textobject><phrase>
              Tooltip explains BeeGFS options
            </phrase></textobject>
            <caption><para>
              Tooltip explains BeeGFS options
            </para></caption>
          </mediaobject>
          <mediaobject>
            <imageobject><imagedata
            fileref="images/network_fs_mounts/options-beegfs-editor.png"
            width="85%" format="PNG"/></imageobject>
            <textobject><phrase>
              Adding values for BeeGFS options
            </phrase></textobject>
            <caption><para>
              Adding values for BeeGFS options
            </para></caption>
          </mediaobject>
          The pre-defined <classname>BeeGFS</classname> client options shown by QluMan are
          automatically generated from the example configuration file distributed in the
          <classname>BeeGFS</classname> packages. Each option has a description that can be
          seen as a tool-tip when hovering over an option that was already selected. The same
          description is also shown in the <classname>BeeGFS Client Options Editor</classname>
          for the option that is selected there. The editor can be opened by clicking the
          <guibutton>BeeGFS Client Options Editor</guibutton> button and works the same way as
          for <link linkend="Generic-Properties">generic properties</link>,
        </para>
        <para>
          For options where a default value is provided in the example config file, this value
          will be pre-defined and immutable in QluMan's <classname>BeeGFS Client Options
          Editor</classname>. In case of boolean options, both <literal>true</literal> and
          <literal>false</literal> will be pre-defined regardless of the default. For other
          options, additional values must be added using the editor, before they can be
          assigned to a <classname>BeeGFS</classname> mount config entry.
        </para>
        <note>
          <para>
            Options without a default, like e.g. <literal>connAuthFile</literal>, will have no
            value pre-defined and won't show up in the context-menu, unless a value is added
            through the editor.
          </para>
        </note>
      </section>
    </section>
  </section>
</chapter>
