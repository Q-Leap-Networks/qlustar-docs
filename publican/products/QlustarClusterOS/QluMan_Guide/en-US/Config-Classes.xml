<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter [
<!ENTITY % BOOK_ENTITIES SYSTEM "QluMan_Guide.ent">
%BOOK_ENTITIES;
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % DOCBOOK_ENTS PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "/usr/share/xml/docbook/schema/dtd/4.5/dbcentx.mod">
%DOCBOOK_ENTS;
]>
<chapter xmlns="http://docbook.org/ns/docbook"
	 xmlns:xlink="http://www.w3.org/1999/xlink"
	 xmlns:xi="http://www.w3.org/2001/XInclude"
	 xml:id="chap-Config-Classes">
  <title>Common Config Classes</title>
  <section xml:id="sec-Config-Classes-Overview">
    <title>Overview</title>
    <para>
      <classname>Config Classes</classname> manage configurations that are too complex to fit
      into the key + value scheme used by properties. Therefore, there is no common interface
      to configure all classes. Instead, each class has its own configuration dialog,
      presenting the specific options it provides. Furthermore, some classes depend on
      sub-classes (e.g. <classname>Boot Configs</classname> depend on <classname>Qlustar
      Images</classname>). Only the top-level <classname>Config Classes</classname> are
      directly assignable to a <classname>Config Set</classname> or a host. Sub-classes are
      assigned indirectly via their parent class. Most of the functional subsystems of
      <productname>Qlustar</productname> have a dedicated <classname>Config
      Class</classname>. Currently, there are five of them: <classname>Network</classname>,
      <classname>Boot</classname>, <classname>DHCP</classname>, <classname>Disk</classname>,
      and <classname>Slurm Configs</classname> (Slurm is optional) complemented by a single
      sub-class, <classname>Qlustar Images</classname>. Please note that the
      <classname>Network Configs</classname> has already been described in a <link
      linkend="sec-Network-Configs">previous chapter</link>
    </para>
  </section>
  <section xml:id="sec-Writing-Config-Files">
    <title>Writing Config Files</title>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/write_files/main.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          The Write Files dialog
        </phrase></textobject>
        <caption><para>
          The Write Files dialog
        </para></caption>
      </mediaobject>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/write_files/with_changes.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          The Write Files dialog with pending changes
        </phrase></textobject>
        <caption><para>
          The Write Files dialog with pending changes
        </para></caption>
      </mediaobject>
      Many of the configurations managed in the <application>QluMan</application> GUI via
      <classname>Config Classes</classname> and sub-classes, are translated into automatically
      generated configuration files on the head-node(s). While
      <application>QluMan</application> configuration options are usually saved in the
      <application>QluMan</application> database immediately after they have been entered in
      the GUI, the write process of the real configuration files on disk is a separate step,
      that needs to be specifically initiated and confirmed.
    </para>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/write_files/write_files_button.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          The Write Files button.
        </phrase></textobject>
        <caption><para>
          The Write Files button.
        </para></caption>
      </mediaobject>
      Each configuration dialog of a config class has a <guibutton>Preview</guibutton> and a
      <guibutton>Write</guibutton> button for its own config files. Additionally, there is a
      dedicated dialog for writing and previewing <emphasis role="bold">all</emphasis>
      configuration files. You can access the latter from <guimenuitem>Manage
      Cluster</guimenuitem>-><guimenuitem>Write Files</guimenuitem> or via the <guibutton>Write
      Files</guibutton> button at the bottom right of the main window. The button is an
      indicator for the presence of pending changes: It is grayed out if there aren't any, and
      fully visible otherwise.
    </para>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/preview_diff/view.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Display of a config's content
        </phrase></textobject>
        <caption><para>
          Display of a config's content
        </para></caption>
      </mediaobject>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/preview_diff/diff_one.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Display of a single config's content including a diff
        </phrase></textobject>
        <caption><para>
          Display of a single config's content including a diff
        </para></caption>
      </mediaobject>
       <mediaobject>
        <imageobject><imagedata
        fileref="images/preview_diff/diff_many.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Display of multiple configs including their diffs
        </phrase></textobject>
        <caption><para>
          Display of multiple configs including their diffs
        </para></caption>
      </mediaobject>
      If a config class has no pending changes, the <guibutton>Preview</guibutton> button
      becomes a <guibutton>View</guibutton> button and the <guibutton>Write</guibutton> button
      becomes ghosted. The Preview window shows both, the new version of the config file that
      will be written, as well as a <parameter>context diff</parameter> of the changes compared
      to the current file on disk (if there are any differences). If a <classname>Config
      Class</classname> changes only one file, that file will be shown directly. If multiple
      files are involved, there will be one tab for each file.
    </para>
    <note>
      <para>
	Checking the optional <guibutton>Force</guibutton> button, will initiate a rewrite of
	all config files, even if they haven't changed.
      </para>
    </note>
    <note>
      <para>
	The actual write command is performed via the <link linkend="chap-RX-Engine">Qlustar
	RXEngine</link>. This allows for <emphasis role="bold">consistent management</emphasis>
	of multiple head-nodes e.g. in a high-availability configuration.
      </para>
    </note>
  </section>
  <section xml:id="sec-Boot-Configs">
    <title>Boot Configs</title>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/boot_config/collapsed.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Boot Config dialog
        </phrase></textobject>
        <caption><para>
          Boot Config dialog
        </para></caption>
      </mediaobject>
      The <classname>Boot Config</classname> dialog allows to define settings for the PXE/tftp
      boot server. A boot configuration determines which <link
      linkend="sec-Qlustar-OS-Images">Qlustar OS image</link> is delivered to a node, and
      optionally permits the specification of <firstterm>PXELinux</firstterm> commands and/or
      Linux kernel parameters. When opened, the <classname>Boot Config</classname> window shows
      a collapsed tree-list of all boot configs currently defined, sorted by their names.
    </para>
    <note>
      <para>
	Note that the <classname>default config</classname> is special: It applies to any node
	without a specifically assigned (either through a template or directly) <classname>Boot
	Config</classname>. This means, that in the simplest configuration, where all nodes
	should boot identically, having just the <classname>default config</classname> will be
	sufficient.
      </para>
    </note>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/boot_config/context_menu.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Changing a Boot Config
        </phrase></textobject>
        <caption><para>
          Changing a Boot Config
        </para></caption>
      </mediaobject>
      By expanding a <classname>Boot Config</classname> item, the configured
      <productname>Qlustar</productname> image, PXELinux command, and kernel parameters become
      visible. You can change any of the values, by simply selecting a different option from
      the drop-down menus. In case of kernel parameters, you can also directly edit the entry
      and save the result by pressing <keycap>return</keycap>. Furthermore, it is possible to
      add multiple kernel parameters or remove them through the context menu. Each selected
      kernel parameter will be added to the kernel command line.
    </para>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/boot_config/new.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Creating new Boot Configs
        </phrase></textobject>
        <caption><para>
          Creating new Boot Configs
        </para></caption>
      </mediaobject>
      The context menu also lets you create new <classname>Boot Configs</classname> and edit or
      delete an existing one. Alternatively, a new <classname>Boot Config</classname> can be
      created by clicking the <guibutton>New</guibutton> button at the bottom of the
      dialog. Both, the context menu and the button bring up the <classname>New Boot
      Config</classname> dialog. Simply enter the name and description for the new config,
      select a Qlustar image and (optionally) a PXELinux command. Finally press
      <guibutton>OK</guibutton> to create it. The new config will then appear in the
      <classname>Boot Config</classname> window and will be ready for use.
    </para>
    <para>
      Pressing the <guibutton>Boot Parameter Editor</guibutton> button at the bottom of the
      dialog, will bring up a small edit dialog, where kernel parameters can be created,
      edited, or deleted.
    </para>
  </section>
  <section xml:id="sec-DHCP-Config">
    <title>DHCP Config</title>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/dhcp_config/global.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          The global DHCP template
        </phrase></textobject>
        <caption><para>
          The global DHCP template
        </para></caption>
      </mediaobject>
      The <classname>DHCP config</classname> dialog allows the configuration of the DHCP
      server and is provide by the main menu <guimenuitem>Manage
      Configs</guimenuitem>-><guimenuitem>DHCP Configs</guimenuitem>. The final DHCP server
      configuration file on disk is assembled from the header which defines global settings
      and the host part which contains the MAC/IP address and hostname of all the hosts
      registered with <application>QluMan</application>. The header can freely be edited in
      the <classname>Global DHCP Template</classname> part of the dialog. An initial version
      of it is created during installation and in most cases doesn't need to be changed. It
      contains many important parameters required for the cluster to function
      properly. Please consult the documentation of the DHCP server and the
      <filename>dhcpd.conf</filename> man page for the syntax of this file.
    </para>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/dhcp_config/edit_global.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Editing the global DHCP template
        </phrase></textobject>
        <caption><para>
          Editing the global DHCP template
        </para></caption>
      </mediaobject>
      To prevent multiple persons from editing at the same time and overwriting each others
      changes accidentally you must acquire a lock for the template by clicking the
      <guibutton>Edit</guibutton> button. If another user is already editing the file the
      button will be ghosted and the tool tip will show which user is holding a lock for the
      template.
    </para>
    <para>
      After having finished editing a template, don't forget to save your changes by clicking
      the <guibutton>Save</guibutton> button. It will be ghosted, if there is nothing to
      <mediaobject>
        <imageobject><imagedata
        fileref="images/dhcp_config/save_global.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Saving the global DHCP template
        </phrase></textobject>
        <caption><para>
          Saving the global DHCP template
        </para></caption>
      </mediaobject>
      save. You can undo all your changes up to the last time the template was saved by
      clicking the <guibutton>Undo</guibutton> button. In case another admin has made changes
      to a template while you are viewing or editing it, the <guibutton>Refresh</guibutton>
      button will become enabled. By clicking it, the updated template is shown and you loose
      any unsaved changes you have already made in your own edit field. To delete a template
      click the <guibutton>Delete</guibutton> button.
      <note>
	<para>
	  Note that the "Global Template" can not be deleted, since it is needed for the
	  DHCP server to function correctly.
	</para>
      </note>
    </para>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/template/lock_expire.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Lock expiration pop-up
        </phrase></textobject>
        <caption><para>
          Lock expiration pop-up
        </para></caption>
      </mediaobject>
      The template lock expires automatically after some time without activity so that the
      template is not deadlocked if someone forgets to release the lock. In such a case the
      above dialog will be shown notifying you about it. By selecting
      <guibutton>OK</guibutton> a new lock will be requested. If another user is editing the
      template at that time though the request will fail and an error dialog will inform you
      of the failure.
    </para>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/dhcp_config/menu.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Choosing group templates
        </phrase></textobject>
        <caption><para>
          Choosing group templates
        </para></caption>
      </mediaobject>
      DHCP options can also be set in separate group templates and targeted to specific
      hosts. For simple clusters, this is hardly ever needed, but for large clusters e.g. you
      might want to have more than one boot server to speed up cluster boot time. In this
      case you could assign different groups of hosts to different boot servers using this
      method. The defined group templates are available as configs to be added to config sets
      or hosts directly. You can select a group template from the drop-down menu at the
      bottom to view or edit it. As an example 2 templates specifying different boot-servers
      are included.
    </para>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/dhcp_config/new.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Creating a new template
        </phrase></textobject>
        <caption><para>
          Creating a new template
        </para></caption>
      </mediaobject>
       <mediaobject>
        <imageobject><imagedata
        fileref="images/dhcp_config/edit_new.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Saving the new template
        </phrase></textobject>
        <caption><para>
          Saving the new template
        </para></caption>
      </mediaobject>
     The drop-down menu also lets you create new templates by selecting the <guimenuitem>new
      DHCP group</guimenuitem> entry. Enter the name of the template in the text field and
      fill in the contents and description of the template. Pressing <keycap>return</keycap>
      after entering the name will automatically acquire a lock for the new template and go
      into edit mode. You can then enter the contents of the new template. Don't forget to
      click the <guibutton>Save</guibutton> button at the end.
    </para>
    <para>
      When you are satisfied with your changes, you can preview the resulting
      <filename>dhcpd.conf</filename> file together with a diff to the old version on disk by
      clicking the <guibutton>Preview</guibutton> button. This will also display
      <filename>ql-mcastd.conf</filename>, the configuration file for the Qlustar 'OS image
      pusher' <classname>ql-mcastd</classname>. The latter hugely speeds up the PXE boot
      process when starting many nodes in parallel by transferring
      <productname>Qlustar</productname> images using <firstterm>multicast</firstterm>.
    </para>
    <para>
      The changes will only take full effect when you click the <guibutton>Write</guibutton>
      button. This will also tell the DHCP server to reload its configuration. The same can
      also be done through the main menus <guimenuitem>Manage
      Cluster</guimenuitem>-><guimenuitem>Write Files</guimenuitem> entry or the
      <guibutton>Write Files</guibutton> button at the bottom of the cluster window and then
      selecting <guibutton>Preview</guibutton> or <guibutton>Write</guibutton> button in the
      DHCP Configs row.
    </para>
  </section>
  <section xml:id="sec-Disk-Configs">
    <title>Disk Configs</title>
    <para>
      <productname>Qlustar</productname> has a powerful mechanism to manage the configuration
      of disks on a node. This mechanism is partly based on the setup_storage module of <link
      xlink:href="http://fai-project.org/___blank___">FAI</link>. It basically allows for any
      automatic setup of your hard drives including kernel software RAID (md) and
      <firstterm>LVM</firstterm> setups. A detailed description of the syntax for disk
      configurations is <link xlink:href="http://fai-project.org/doc/man/setup-storage.html">
      available</link>. Since the OS of a <productname>Qlustar</productname> node is always
      running from RAM, a disk-less configuration is obviously also possible. Note, that for
      flawless operation this requires some extra configuration (handling of log messages and
      in/output of batch jobs) that will be explained in the
      <productname>Qlustar</productname> admin guide. Valid configurations require
      definitions for two filesystems /var and /scratch as well as swap space (see
      examples). To permit the initial formatting of a new disk configuration on a node, it
      must have assigned the <parameter>Schedule Format: always</parameter> generic property
      during the initial boot (see the discussion <xref linkend="PropConf-Sets"
      endterm="PropConf-Sets"/>.
    </para>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/disk_config/main.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Creating/editing disk configs
        </phrase></textobject>
        <caption><para>
          Creating/editing disk configs
        </para></caption>
      </mediaobject>
      Disk configurations can be managed using the <classname>Disk Configs</classname> dialog
      accessible from the main menu <guimenuitem>Manage
      Configs</guimenuitem>-><guimenuitem>Disk Configs</guimenuitem>. You can select the
      config to be viewed/edited from the drop-down menu at the bottom left. A couple of
      example configurations are created during the installation. Note that there are two
      special configs: (a) "disk-less" (not editable or deletable) and (b) "default"
      (editable but not deletable). The default config is used for any node that doesn't have
      a specific assignment to a disk config (via a Host Template, config set). The
      configuration itself can be edited in the text field at the top of the dialog and
      should conform to setup_storage syntax (see above). New configs can be created by
      choosing <guimenuitem>new disk config</guimenuitem> from the drop-down menu. As usual,
      enter the name of the new config in the text field and fill in the contents and
      description.
    </para>
  </section>
  <section xml:id="sec-Network-FS-Mounts-overview">
    <title>Network Filesystem Mounts</title>
    <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="network-fs-mounts__overview.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Network FS Mounts overview
        </phrase></textobject>
        <caption><para>
          Network FS Mounts overview
        </para></caption>
      </mediaobject>
      <application>QluMan</application> also supports the configuration and management of
      Network Filesystem (FS) mounts for cluster nodes. The setup for this consists of two
      parts: 1) A Filesystem Export resource must be defined using the dialog at
      <guimenuitem>Manage Cluster</guimenuitem>-><guimenuitem>Filesystem Exports</guimenuitem>.
      2) A Network FS Mounts config must be created using the dialog at <guimenuitem>Manage
      Configs</guimenuitem>-><guimenuitem>Network FS Mounts</guimenuitem>. Such a config may
      contain multiple network mount definitions and as with other config classes, it can then
      be assigned to nodes through the Global or a Host Template, Config Set or direct
      assignment.
    </para>
    <section xml:id="sec-Filesystem-Exports">
      <title>Filesystem Exports</title>
      <para>
      <mediaobject>
        <imageobject><imagedata
        fileref="images/filesystem_exports/filesystem_exports__new.png"
        width="85%" format="PNG"/></imageobject>
        <textobject><phrase>
          Creating a new FS export
        </phrase></textobject>
        <caption><para>
          Creating a new FS export
        </para></caption>
      </mediaobject>
        The Filesystem Exports dialog shows the list of exported filesystems by name and
        filesystem type. Selecting an entry will show the details for this filesystem export on
        the right. A new Filesystem Export resource can be added by clicking the
        <guibutton>New</guibutton> button. This requires choosing a unique name that will be
        used inside Qluman to identify the resource. The <emphasis>Resource Name</emphasis>
        field will turn green if the entered name is unique. Currently only NFS exports are
        supported for the Filesystem type. Support for Lustre and BeeGFS is planned for future
        versions.
      </para>
      <para>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/filesystem_exports/filesystem_exports__new2.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Defining export properties
	  </phrase></textobject>
	  <caption><para>
	    Defining export properties
	  </para></caption>
	</mediaobject>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/filesystem_exports/filesystem_exports__edit.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Saving the export resource
	  </phrase></textobject>
	  <caption><para>
	    Saving the export resource
	  </para></caption>
	</mediaobject>
        Next the server exporting the filesystem has to be selected. The default is beosrv-c,
        the cluster-internal hostname of the head-node, as the most likely server to export a
        filesystem. The server can be selected from a list of servers used for other exports
        using the drop-down menu. To use a new server, the name has to be entered manually. It
        can be any hostname known to Qluman. The <guilabel>Server</guilabel> label will turn
        green if the entered name is a known host. This includes all nodes configured in the
        Enclosure View and any cluster-external host defined in <guimenuitem>Manage
        Cluster</guimenuitem>-><guimenuitem>Global Settings</guimenuitem>-><guimenuitem>Network
        Settings</guimenuitem>.
      </para>
      <para>
        Finally, the path of the filesystem to be exported on the server has to be
        entered. Because the path will later be used in a systemd mount unit file, there are
        some restrictions on the syntax. For example the path must start with a "/" and must
        not have a trailing "/". The <guilabel>Path</guilabel> will turn green if the path is
        acceptable and red otherwise. Once all fields are entered correctly, the
        <guibutton>Save</guibutton> button will be enabled and the Filesystem Export can be
        added. It will then appear in the Filesystem Exports window.
      </para>
      <para>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/filesystem_exports/filesystem_exports__network_priority.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Networks available for an export
	  </phrase></textobject>
	  <caption><para>
	    Networks available for an export
	  </para></caption>
	</mediaobject>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/filesystem_exports/filesystem_exports__network_priority__add.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Adding a network for an export
	  </phrase></textobject>
	  <caption><para>
	    Adding a network for an export
	  </para></caption>
	</mediaobject>
	<mediaobject>
	  <imageobject><imagedata
	  fileref="images/filesystem_exports/filesystem_exports__network_priority__remove.png"
	  width="85%" format="PNG"/></imageobject>
	  <textobject><phrase>
	    Removing a network for an export
	  </phrase></textobject>
	  <caption><para>
	    Removing a network for an export
	  </para></caption>
	</mediaobject>
        Qluman automatically adds the networks available on the selected server to the Network
        priorities. Later, when mounting the filesystem, the networks available on the client
        are checked against this list and the first common entry is used to mount the
        filesystem. Shown entries can be removed or additional networks added from the context
        menu. Entries can also be moved up or down using drag and drop. This is useful e.g. to
        ensure that an NFS export is mounted via Infiniband/RDMA on all hosts that are
        connected to the IB fabric and via Ethernet on nodes without IB.
      </para>
      <note>
	<para>
	  If the selected server is cluster-external, it will obviously not have a choice of
	  network priorities.
	</para>
      </note>
    </section>
  </section>
</chapter>

