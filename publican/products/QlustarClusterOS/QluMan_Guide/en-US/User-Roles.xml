<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter [
<!ENTITY % BOOK_ENTITIES SYSTEM "QluMan_Guide.ent">
%BOOK_ENTITIES;
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % DOCBOOK_ENTS PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "/usr/share/xml/docbook/schema/dtd/4.5/dbcentx.mod">
%DOCBOOK_ENTS;
]>
<chapter xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xml:id="chap-User-Rights">
  <title>QluMan User and Rights Management</title>
  <section xml:id="sec-User-Rights-Overview">
    <title>Overview</title>
    <para>
      <application>QluMan</application> is <literal>multi-user capable</literal> and provides
      an interface to configure and control users as well as their permissions when they work
      with <application>QluMan</application>. The <application>QluMan</application> users are
      not connected to system users in any way. To simplify permission management, the
      concept of <literal>user roles</literal> can be used. User roles allow to predefine a
      <emphasis role="bold">collection of permissions</emphasis> for
      <application>QluMan</application> operations. Once defined, they can be assigned to a
      user.
    </para>
  </section>
  <section xml:id="sec-User-Manage">
    <title>Managing QluMan Users</title>
    <para>
      <!--cbox(file: users/main.png)-->
      <!--cbox(file: users__select.png)-->
      The <literal>admin user</literal> is pre-defined and has the <literal>admin
      role</literal>, meaning all possible rights. Roles for the admin user can not be
      changed, just like the root user in a Linux system always has all rights. When
      running <application>QluMan</application> for the first time, you should set the
      correct email address for the admin user.
    </para>
    <section xml:id="sec-User-Add">
      <title>Adding a User</title>
      <para>
	<!--cbox(file: users__new3.png)-->
	<!--cbox(file: users__new2.png)-->
	<!--cbox(file: users__select.png)-->
	<!--cbox(file: users__new.png)-->
	To create a new user, click <guibutton>New User</guibutton> and enter the name for the
	new user to create it. Then select the user from the drop-down menu and fill out the
	remaining fields. The changes will be saved automatically when <keycap>return</keycap>
	is pressed or the input field looses the focus. New users have no roles assigned to
	them and will have no rights to change something. They can only inspect the cluster
	config (read-only mode). See <xref linkend="sec-Roles-Manage"/> for how to create new
	roles and assign them to the user by checking the respective checkboxes. If the
	<guibutton>New User</guibutton> button is not selectable, then the user lacks
	sufficient rights to create new users. The <guibutton>Roles</guibutton> buttons will
	then also be disabled, preventing an unauthorized user from giving himself or others
	extra roles.
      </para>
    </section>
    <section xml:id="sec-User-Auth-Token">
      <title>Generating the Auth Token</title>
      <para>
	<!--cbox(file: users__new_auth_token.png)-->
	A new user is also created without login credentials, so initially, he can't connect
	to QluMan. Hence, the next step is to generate a <literal>one-time token</literal>
	for the user by clicking <guibutton>New Auth Token</guibutton>. Generating the
	one-time token may take a little time to finish and happens before the <classname>New
	Auth Token</classname> dialog opens. The dialog shows a certificate containing the
	generated one-time token as well as the other login information required to connect
	to the server. The certificate is protected by an auto-generated 8 digit pin, so
	that it can be transfered over unencrypted communication channels like e-mail or
	chat programs. In such a case the pin should be send over a second, different,
	communication channel, e.g. reading it over the phone.
      </para>
      <para>
	As a special case, when a user clicks <guibutton>New Auth Token</guibutton> for
	himself, the generated token is imported into his running client and replaces the
	current login credentials. A reconnect is then triggered automatically which forces
	the client to generate a new random public/private key pair and use the new one-time
	token to authenticate itself to the server. This should be used to invalidate the old
	keys and replace them with fresh ones, in case a user suspects the certificate safe
	might have been compromised by an attacker.
      </para>
      <para>
	<!--cbox(file: users__new_auth_token_2.png)-->
	The <classname>New Auth Token</classname> dialog also has 3 usefull buttons at the
	right bottom corner. The <guibutton>Import</guibutton> button allows adding the
	certificate directly to the running client. The use case for this is when creating a
	user account for oneself when working as admin. It is recommendd that for clusters
	with multiple users with admin role that every user has their own user account and
	the admin user is only used to create those.
	<!--cbox(file: users__new_auth_token__mailed.png)-->
	<!--cbox(file: users__new_auth_token__saved.png)-->
	The <guibutton>Save</guibutton> button allows saving the certificate into a file and
	the <guibutton>Mail</guibutton> button sends the certificate to the email configured
	for the user. In both cases only the certificate is saved or mailed and the password
	needs to be send separately.
      </para>
      <para>
	For optimal security, it is recommened to leave a new user without roles, until he has
	logged in using the one-time token. That way, if the certificate was intercepted, it
	will be useless to an attacker, since he won't be able to perform any actions within
	QluMan. Also, if the attacker manages to intercept and use the certificate before the
	real intended user does, the real user won't be able to use it anymore and notice that
	something is wrong, most likely reporting to the main cluster administrator.
      </para>
      <note>
	<para>
	  The certificate contains the information about the cluster telling the client how to
	  connect to it and the public key of the <systemitem
	  class="systemname">qlumand</systemitem> server that ensures the client will only talk
	  to the desired server and can't be eavesdropped. It also contains a one-time token
	  allowing any client to log in exactly once within the next 48 hours. On the first
	  login with a correct one-time token, the client's public key (generated randomly and
	  uniquely for the cluster/user pair) is stored by the server and used to authenticate
	  the user in the future. The client's and server's public and private keys are also
	  used when connecting, to safely exchange session keys enabling <emphasis
	  role="bold">encryption with perfect forward-security</emphasis>.
	</para>
      </note>
    </section>
    <section xml:id="sec-User-Remove">
      <title>Removing a User</title>
      <para>
	<!--cbox(file: users__delete2.png>-->
	<!--cbox(file: users__delete.png>-->
	A user other than admin can be deleted by clicking the <guibutton>Delete
	User</guibutton> button. Just like the <guibutton>New User</guibutton> button, it is
	only enabled if the current user has sufficient rights.
      </para>
    </section>
  </section>
  <section xml:id="sec-Roles-Manage">
    <title>Managing User Roles/Permissions</title>
    <para>
      The <application>QluMan</application> server performs <emphasis role="bold">many
      individual rights</emphasis> checks, before it allows/performs an operation. Many of
      those correspond directly to a specific window in the GUI, giving the user the right to
      alter settings in that window. For example, the right to configure Qlustar images
      corresponds directly to operations available from the <literal>Qlustar Images</literal>
      window opened from <guimenuitem>Manage Configs</guimenuitem>-><guimenuitem>Qlustar
      Images</guimenuitem>. Others govern the right to specific actions or to alter specific
      properties. For example, the right to configure OpenSM on hosts enables the user to add,
      alter or delete the <literal>OpenSM Ports</literal> and <literal>OpenSM Options</literal>
      property of hosts in the <classname>Enclosure View</classname>.
    </para>
    <para>
      The rights are grouped into 4 categories: <literal>Admin rights</literal> covers
      rights with global impact and root access to nodes, <literal>Booting</literal> covers
      all settings that affect how nodes will boot, <literal>Services</literal> covers the
      configuration of daemons and <literal>Host Config</literal> covers the general
      configuration of hosts.
    </para>
    <para>
      <!--cbox(file: roles__manager.png)-->
      <!--cbox(file: roles__new.png)-->
      <!--cbox(file: roles__empty.png)-->
      Creating and editing roles is simple. Click <guibutton>New</guibutton> to create a
      new role, fill in a name and description for it and click
      <guibutton>OK</guibutton>. To change the rights associated with a role, first select
      it using the dropdown menu at the top. Next click the checkmark boxes to the left of
      the rights you want to change, grant or remove from the role. Click
      <guibutton>Save</guibutton> to save the changes or <guibutton>Undo</guibutton> to
      reset the rights to the last saved settings.
    </para>
  </section>
</chapter>

