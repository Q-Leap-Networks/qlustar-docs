<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section [
<!ENTITY % BOOK_ENTITIES SYSTEM "administration-manual.ent">
%BOOK_ENTITIES;
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % DOCBOOK_ENTS PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "/usr/share/xml/docbook/schema/dtd/4.5/dbcentx.mod">
%DOCBOOK_ENTS;
]>
<section xmlns="http://docbook.org/ns/docbook"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xml:id="admin-man-sect-os-pkg-man">
  <title>OS Package Management</title>
  <indexterm><primary>Package Management</primary></indexterm>
  <para>
    Ubuntu/Debian package management is based on the concept of package sources or 
    repositories. A configuration file <filename>/etc/apt/sources.list</filename> 
    (or separate files in the directory <filename>/etc/apt/sources.list.d</filename>)
    specifies the location of package sources.
  </para>
  <para>
    When a package is to be installed, all package source locations are checked whether they
    contain the desired package. If the desired package is found in only one package repository
    that one is taken, if it is found in more than one, then the package with the newest
    version is installed.
  </para>
  <section xml:id="admin-man-sect-pkg-srcs">
    <title>Package sources</title>
    <indexterm><primary>Package Management</primary>
    <secondary>Package sources</secondary></indexterm>
    <para> 
      Package sources are usually specified in <filename>/etc/apt/sources.list</filename> and
      can be of many different types, like http, ftp, file, cdrom, &hellipsis; (see
      <command>man sources.list</command>). In a default Qlustar installation this file is
      empty, since all the Qlustar package sources are defined in the file
      <filename>/etc/apt/sources.list.d/qlustar.list</filename>. If your system has access to
      the Internet either directly or through a http proxy the file will look like this:
    </para>
    <screen>
deb http://repo.qlustar.com/repo/ubuntu 10.0-xenial main universe non-free
deb http://repo.qlustar.com/repo/ubuntu 10.0-xenial-proposed-updates main universe non-free
    </screen>
    <para>
      This enables access to the Qlustar 10.0 software repository.
    </para>
    <note>
      <para>
	The file <filename>/etc/apt/sources.list.d/qlustar.list</filename> is managed by
	Qlustar and should usually not be edited manually. If you prefer not to receive the
	proposed updates, you can comment out the second line in the file. Be aware, that this
	will prevent you from receiving timely security updates as well.
      </para>
    </note>
  </section>
  <section xml:id="admin-man-sect-dpkg">
    <title>dpkg</title>
    <indexterm><primary>Package Management</primary>
    <secondary>dpkg</secondary></indexterm>
    <para>
      <command>dpkg</command> (see <command>man dpkg</command>) is the
      basic package management tool for Ubuntu/Debian, comparable to
      rpm (<application>Red Hat Package Manager</application>). It is
      not capable of automatically resolving package dependencies.
    </para>
  </section>
  <section xml:id="admin-man-sect-apt">
    <title>apt</title>
    <indexterm><primary>Package Management</primary><secondary>apt</secondary></indexterm>
    <para>
      <command>apt</command> is the high-level package management tool for Ubuntu/Debian.
      <command>apt</command> (<command>man apt</command>) with its sub-commands provides all
      the functionality needed to maintain an Ubuntu/Debian system. A seem-less and fast
      upgrade of an Ubuntu/Debian system is typically performed running the two commands
    </para>
    <screen>
<prompt>0 root@cl-head ~ #</prompt><command>
apt update</command>

<prompt>0 root@cl-head ~ #</prompt><command>
apt dist-upgrade.</command>
    </screen>
    <para>
      Detailed upgrade instructions for a Qlustar system can be found
      in the <xref linkend="sec-Qlustar" xrefstyle="template:Qlustar Update Section"/>
    </para>
    <para>
      New packages can be installed by running 
      <command>apt install <replaceable>&lt;package name&gt;</replaceable></command>. If  
      <replaceable>package name</replaceable>
      depends on, or conflicts with other packages those will be automatically installed
      or removed upon confirmation.
    </para>
  </section>
  <section xml:id="admin-man-sect-debian-pkg-altern">
    <title>Debian Package Alternatives</title>
     <indexterm><primary>Package Management</primary>
     <secondary>alternatives</secondary></indexterm>
     <para>
       The possibility to concurrently run different versions of the same application on a
       single cluster is often crucial. In principle, this is achievable in a couple of ways,
       each one requiring more or less handwork depending on the type of application in
       question. Fortunately, Ubuntu/Debian provides the built-in <firstterm>alternatives
       mechanism</firstterm> to manage software versions in automated form. It has the
       additional advantage that it works appropriately for any kind of application.
     </para>
     <para>
       Let us consider the case of the GNU C compiler <command>gcc</command> as an example of
       the situation described above. Simply installing the <package>gcc</package> package via
       <command>apt</command> is all you need to do in this case. The alternatives are
       automatically configured for you.
       <screen>
<prompt>0 root@cl-head ~ #</prompt><command>
cc --version</command>
cc (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609
Copyright (C) 2015 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
       </screen>
       This tells us that currently we are running the version 5.4.0 of the GNU C compiler. Let
       us inspect the <application>cc</application> binary.
       <screen>
<prompt>0 root@cl-head ~ #</prompt><command>
type cc</command>
cc is hashed (/usr/bin/cc)
<prompt>0 root@cl-head ~ #</prompt><command>
ls -l /usr/bin/cc</command>
lrwxrwxrwx ... /usr/bin/cc -> /etc/alternatives/cc
       </screen>
       As we tried to locate the <command>cc</command> command, we found that
       it was being executed from the <filename>/usr/bin</filename> path. However we 
       also discovered, that it’s a symbolic link pointing to 
       <filename>/etc/alternatives/cc</filename>. The directory 
       <filename>/etc/alternatives</filename> is the place, where all the 
       software alternatives are configured in Ubuntu/Debian. Let us inspect a little further.
       <screen>
<prompt>0 root@cl-head ~ #</prompt><command>
ls -l /etc/alternatives/cc</command>
lrwxrwxrwx ... /etc/alternatives/cc -> /usr/bin/gcc
       </screen>
       We have another symbolic link, this time referring to <filename>/usr/bin/gcc</filename>
       and a little digging afterward reveals that this is a link to the real
       <command>gcc</command> executable. If alternative versions for a program are available,
       the alternatives system will create a link with the name of the program in the default
       path pointing to the appropriate file in <filename>/etc/alternatives</filename>. This
       will finally link to the executable, we actually want to use. Instead of manually
       manipulating these links, choosing a different default version for a program should be
       done using the command <command>update-alternatives</command>.
     </para>
     <para>
       Using <command>update-alternatives</command> we can quickly figure out which 
       alternatives are currently configured for a certain executable. Let us look at the 
       current setup of <application>cc</application>.
       <screen>
<prompt>0 root@cl-head ~ #</prompt><command>
update-alternatives --display gcc</command>
cc - auto mode
  link best version is /usr/bin/gcc
  link currently points to /usr/bin/gcc
  link cc is /usr/bin/cc
  slave cc.1.gz is /usr/share/man/man1/cc.1.gz
/usr/bin/gcc - priority 20
  slave cc.1.gz: /usr/share/man/man1/gcc.1.gz
     </screen>
       As you can see the current link points to <filename>/usr/bin/gcc</filename> as we
       already discovered. There might be another alternative, with a different priority. The
       line <code>'gcc - auto mode’</code> means that the alternatives system will look for the
       package with the highest priority in order to use that executable.
     </para>
     <para>
       The last line in the above output says that the current best priority link is
       <filename>/usr/bin/gcc</filename>. If we had installed an alternative for cc and would want to want to use it instead,
       we could tell <command>update-alternatives</command> to use this variant as follows:
       <screen>
<prompt>0 root@cl-head ~ #</prompt><command>
update-alternatives --config cc</command>
       </screen>
     </para>
     <para>
       A further useful feature of <command>update-alternatives</command> is the possibility of
       creating groups of files having a relation with each other. These so called slaves will
       not only allow you to update the link to the desired executable, but also any other
       information related to it like man pages, documentation, etc. as shown for the
       <application>cc</application> example above. Please consult <command>man
       update-alternatives</command> for more information on the capabilities of this powerful
       software versioning method.
     </para>
   </section>
 </section>
